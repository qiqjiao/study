========base=========
1. --------array-----------
typedef struct {
    void        *elts;
    ngx_uint_t   nelts; // used elts
    size_t       size; // size of each elt
    ngx_uint_t   nalloc; // allocated elts
    ngx_pool_t  *pool;
} ngx_array_t;

// ngx_array_t *a = ngx_palloc(p, sizeof(ngx_array_t));
// ngx_array_init(a, p, n, size)
ngx_array_t *ngx_array_create(ngx_pool_t *p, ngx_uint_t n, size_t size);

void ngx_array_destroy(ngx_array_t *a);

// a->elts = ngx_palloc(p, 2 * size) if a->nelts == a->nalloc
// return address next element && a->nelts++;
void *ngx_array_push(ngx_array_t *a);

// a->elts = ngx_palloc(p, 2 * size) if a->nelts + n > a->nalloc
// return address next element && a->nelts += n;
void *ngx_array_push_n(ngx_array_t *a, ngx_uint_t n);

// array->(nelts, size, nalloc, pool) = {0, size, n, pool)
// array->elts = ngx_palloc(pool, n * size);
ngx_int_t ngx_array_init(ngx_array_t *array, ngx_pool_t *pool, ngx_uint_t n, size_t size);

2. --------list-----------
typedef struct ngx_list_part_s {
    void             *elts;
    ngx_uint_t        nelts;
    ngx_list_part_t  *next;
} ngx_list_part_t;
typedef struct {
    ngx_list_part_t  *last;
    ngx_list_part_t   part;
    size_t            size;
    ngx_uint_t        nalloc;
    ngx_pool_t       *pool;
} ngx_list_t;

// list = ngx_palloc(pool, sizeof(ngx_list_t));
// ngx_list_init(list, pool, n, size);
ngx_list_t *ngx_list_create(ngx_pool_t *pool, ngx_uint_t n, size_t size);

// list->part.(elts, nelts, next) = {ngx_palloc(pool, n * size), 0, NULL)
// list->(last, size, nalloc, pool) = {&list->part, size, n, pool}
ngx_int_t ngx_list_init(ngx_list_t *list, ngx_pool_t *pool, ngx_uint_t n, size_t size);

// if (list->last->nelts == list->nalloc):
//     Add a new ngx_list_part_t and update list->last
// return address of next element && last->nelts++
void *ngx_list_push(ngx_list_t *list);

3. --------queue-----------
typedef struct ngx_queue_s {
    ngx_queue_s  *prev;
    ngx_queue_s  *next;
} ngx_queue_t;

Structure of queue:
    [h:sentinel] ---> q1 ---> q2---
        ^        <---    <---     |
        |                         |
        |--------------------------
